/*
    Redux - это библиотека для работы с состоянием приложения. Это, по сути, кранилище данных.

    Redux решает проблему проавливания пропсов. Представим, что мы имеем App, это наш верхнеуровневый компонент, теперь нарисуем схему:

        App
    /         \
  comp1        comp4
  /    \           \
comp2  comp3        comp5
                  /       \
                comp6     comp7
                            |
                          comp8


Представим такую ситуацию, что у нас есть состояние в comp3, но нам понадобилось его передать в comp8, конечно, мы можем поднять состояние на уровень родителя,
но тогда возникает проблема пропс дриллинга, т.к. нам через пропсы множства компонентов придется передавать состояние. С помощью редакса же мы сможем
работать с любым компонентом и передать ему любое состояние вне зависимости от его местоположения в иерархии приложения.

Поговорим на примерах: представим, что есть какой-то банк - это наш state, общее состояние, которое хранит в себе данные и представим, что у нас есть какие-то 
действия, например, снять деньги, положить деньги, так вот - это наш actions. То есть actions опередляет то, как мы изменяем данные в нашем состоянии, в нашем
state.

Однако, мы не можем просто так прийти в банк и снять деньги, для помощи в измении state через actions существует так называемый диспетчер, он же dispatch. 
Перед тем, как изменить какое-либо состояние, мы должны обратиться к диспетчеру и попросить его изменить состояние на основании actions, которые мы передали
в качестве аргументов.

Но также, диспетчер не является конечным приложением, которое поменяет нам state, на самом деле, диспетчер только получает запрос на изменение состояния
и получает конкретный actions, который описывает как это состояние изменяется и с этимид данными, с этим знанием он идет в reducer, можно воспринимать его как 
компьютер, вот reducer служит уже для того, чтобы подсчитать что именно было изменено, каким образом и внести изменения в state. На самом деле, внутри 
reducer уже содержатся все actions, которые как-то взаимодействуют со state, редьюссер знает что именно и как меняет и на основе запроса диспетчера производит
эти изменения в state 
*/ 